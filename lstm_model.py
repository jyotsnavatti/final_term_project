# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xsf_W0PMXjrR9W_yMsJ8H6PZb0aUJyTU
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.metrics import confusion_matrix, roc_auc_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

def calculate_metrics(y_true, y_pred):
    tn, fp, fn, tp = confusion_matrix(y_true, y_pred).ravel()
    fpr = fp / (fp + tn) if (fp + tn) > 0 else 0
    fnr = fn / (fn + tp) if (fn + tp) > 0 else 0
    tss = (tp / (tp + fn)) - (fp / (fp + tn))
    hss = 2 * (tp * tn - fp * fn) / ((tp + fn) * (fn + tn) + (tp + fp) * (fp + tn))
    return {"TP": tp, "TN": tn, "FP": fp, "FN": fn, "FPR": fpr, "FNR": fnr, "TSS": tss, "HSS": hss}

def lstm_model(X, y):
    # Reshape for LSTM input
    X_reshaped = X.reshape((X.shape[0], 1, X.shape[1]))

    # No one-hot encoding; ensure binary labels (0 or 1)
    y = y.reshape(-1, 1)

    kf = KFold(n_splits=10, shuffle=True, random_state=42)
    metrics_list = []

    for train_index, test_index in kf.split(X_reshaped):
        X_train, X_test = X_reshaped[train_index], X_reshaped[test_index]
        y_train, y_test = y[train_index], y[test_index]

        # Build LSTM model
        model = Sequential([
            Dense(32, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])),
            LSTM(32, return_sequences=False, activation='relu'),
            Dense(1, activation='sigmoid')  # Output single probability value for binary classification
        ])
        model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

        # Train model
        model.fit(X_train, y_train, epochs=5, batch_size=32, verbose=0)

        # Predict probabilities and convert to binary predictions
        y_pred_prob = model.predict(X_test)
        y_pred = (y_pred_prob > 0.5).astype(int).flatten()

        # Calculate metrics
        metrics = calculate_metrics(y_test, y_pred)
        metrics["ROC_AUC"] = roc_auc_score(y_test, y_pred_prob)
        metrics_list.append(metrics)

    return pd.DataFrame(metrics_list)